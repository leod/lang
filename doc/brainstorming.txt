iface Iterator[type T] {
	fn next(): bool;
	fn get(): T;		
};

iface Container[type T] {
	type Iterator: Iterator[T];

	fn add(t: T);
	fn iterator(): Iterator;
};

impl arr[type T]: Container[T] {
	struct Iterator {
		a : arr[T];
		idx: int;

		impl Iterator[T] {
			fn next(self: &Iterator): bool = {
				self.idx <- self.idx + 1;	
				self.a.length = self.idx;
			};
			fn get(self: this): T = self.a[self.idx];
		};
	};

	fn add(t: &arr[T]) = {
		// ...
	};

	fn iterator(t: &arr[T]) = Iterator(t, 0);
};
