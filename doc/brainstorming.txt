type Poop = struct {
	x: int;
	y: ref[Poop];
	zzz: arr[Poop];
};
// equals?
struct Poop {
	// ...
};

interface A {
	type X;
	fn poop(: string): void;
};

implement A: Poop {
	type X = alias int;
	fn poop(s : string): void = pooppopopo(s);
}



fn generic[type T: A](t: T): int = {
	var T.X x;
	t.poop("unchi");
};
